---
runme:
  id: 01HX5CPP13PMC8268MNK3F494Q
  version: v3
---

# Question 4

Industrial engineers periodically conduct “work measurement” analyses to determine the time required to produce a single unit of output. At a large processing plant, the number of total worker-hours required per day to perform a certain task was recorded for 50 days. The data are shown below:
128 119 95 97 124 128 142 98 108 120
113 109 124 132 97 138 133 136 120 112
146 128 103 135 114 109 100 111 131 113
124 131 133 131 88 118 116 98 112 138
100 112 11 150 117 122 97 116 92 122

## Part (a)

Compute the mean, median, and the mode of the data set.

```python {"id":"01HX5CPP13PMC8268MNAEYNFB2"}
# Importing necessary libraries
import numpy as np
import matplotlib.pyplot as plt

# Given data
data = [128, 119, 95, 97, 124, 128, 142, 98, 108, 120,
        113, 109, 124, 132, 97, 138, 133, 136, 120, 112,
        146, 128, 103, 135, 114, 109, 100, 111, 131, 113,
        124, 131, 133, 131, 88, 118, 116, 98, 112, 138,
        100, 112, 11, 150, 117, 122, 97, 116, 92, 122]

# (a) Compute the mean, median, and mode
mean = np.mean(data)
median = np.median(data)
mode = np.argmax(np.bincount(data))

print("Mean:", mean)
print("Median:", median)
print("Mode:", mode)
```

Results:
Mean: 115.82
Median: 117.5
Mode: ModeResult(mode=97, count=3)

## Part (b)

Find the range, variance, and standard deviation of the data set.

```python {"id":"01HX5CPP13PMC8268MNE23DR9Y"}
# Importing necessary libraries
import numpy as np
import matplotlib.pyplot as plt

# Given data
data = [128, 119, 95, 97, 124, 128, 142, 98, 108, 120,
        113, 109, 124, 132, 97, 138, 133, 136, 120, 112,
        146, 128, 103, 135, 114, 109, 100, 111, 131, 113,
        124, 131, 133, 131, 88, 118, 116, 98, 112, 138,
        100, 112, 11, 150, 117, 122, 97, 116, 92, 122]
# (b) Find the range, variance, and standard deviation
range_data = np.ptp(data)
variance = np.var(data)
std_deviation = np.std(data)

print("\nRange:", range_data)
print("Variance:", variance)
print("Standard Deviation:", std_deviation)
```

Results:
Range: 139
Variance: 444.10760000000005
Standard Deviation: 21.073860586043555

## Part (c)

Construct the intervals ± s, ± 2s, and ± 3s. Count the number of observations that fall within each interval and find the corresponding proportions. Do you detect any outliers?

```python {"id":"01HX5CPP13PMC8268MNGXD2CWM"}
# Importing necessary libraries
import numpy as np
import matplotlib.pyplot as plt

# Given data
data = [128, 119, 95, 97, 124, 128, 142, 98, 108, 120,
        113, 109, 124, 132, 97, 138, 133, 136, 120, 112,
        146, 128, 103, 135, 114, 109, 100, 111, 131, 113,
        124, 131, 133, 131, 88, 118, 116, 98, 112, 138,
        100, 112, 11, 150, 117, 122, 97, 116, 92, 122]
# (c) Construct intervals ± s, ± 2s, and ± 3s
s = np.std(data)
intervals = [s, 2*s, 3*s]
count_within_intervals = [np.sum((data >= mean - interval) & (data <= mean + interval)) for interval in intervals]
proportions_within_intervals = [count / len(data) for count in count_within_intervals]

print("\nCount within intervals ± s, ± 2s, and ± 3s:", count_within_intervals)
print("Proportions within intervals ± s, ± 2s, and ± 3s:", proportions_within_intervals)

# Detecting outliers
outliers = [obs for obs in data if obs < mean - 3 * s or obs > mean + 3 * s]
print("\nOutliers:", outliers)

```

Results:
Number of observations within ± 1s: 42
Proportion of observations within ± 1s: 0.84
Number of observations within ± 2s: 49
Proportion of observations within ± 2s: 0.98
Number of observations within ± 3s: 49
Proportion of observations within ± 3s: 0.98

## Part (d)

Construct a box plot for the data. Do you detect any outliers?

```python {"id":"01HX5CPP13PMC8268MNH4GPZAB"}
# Importing necessary libraries
import numpy as np
import matplotlib.pyplot as plt

# Given data
data = [128, 119, 95, 97, 124, 128, 142, 98, 108, 120,
        113, 109, 124, 132, 97, 138, 133, 136, 120, 112,
        146, 128, 103, 135, 114, 109, 100, 111, 131, 113,
        124, 131, 133, 131, 88, 118, 116, 98, 112, 138,
        100, 112, 11, 150, 117, 122, 97, 116, 92, 122]

# (d) Construct a box plot to detect outliers
plt.figure(figsize=(10, 6))
sns.boxplot(data)
plt.title('Box plot of daily worker-hours')
plt.xlabel('Daily Worker-Hours')
plt.grid(True)
plt.show()
#save plot to q4 folder
plt.savefig('Questions/q4/q4.png')

# FLAGS FOR OUTLIERS
# Outliers are detected by the box plot. The box plot shows that there are outliers in the data.
# The data points that lie outside the whiskers of the box plot are considered as outliers.

# Detecting outliers
outliers = [obs for obs in data if obs < mean - 3 * s or obs > mean + 3 * s]
print("\nOutliers:", outliers)
```

![Alt Text for Image](/workspaces/sys-640/Questions/q4/q4.png)

## Part (e)

Find the 70th percentile for the data on total daily worker-hours.

```python {"id":"01HX5CPP13PMC8268MNJCJPNNJ"}
# Importing necessary libraries
import numpy as np
import matplotlib.pyplot as plt

# Given data
data = [128, 119, 95, 97, 124, 128, 142, 98, 108, 120,
        113, 109, 124, 132, 97, 138, 133, 136, 120, 112,
        146, 128, 103, 135, 114, 109, 100, 111, 131, 113,
        124, 131, 133, 131, 88, 118, 116, 98, 112, 138,
        100, 112, 11, 150, 117, 122, 97, 116, 92, 122]

# (e) Find the 70th percentile
percentile_70 = np.percentile(data, 70)
print("\n70th percentile for the data on total daily worker-hours:", percentile_70)

```

Results:
70th Percentile: 128.0
